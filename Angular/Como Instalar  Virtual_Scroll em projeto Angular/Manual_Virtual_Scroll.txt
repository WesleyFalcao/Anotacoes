
inserindo virtual scroll aplication angular

1º: Executar o comando: yarn add @angular/cdk, caso não funcione por algum motivo, tente: npm i @angular/cdk --save

2º: importar a seguinte linha no component.ts:  @ViewChild( CdkVirtualScrollViewport ) scroller: CdkVirtualScrollViewport; e adicionar o ngZone no construtor: private ngZone: NgZone;

3º: Colar o seguinte comando no ngOnit (alrações no async, await e no nome da função passada, neste caso vai ser o BuscarRamais(), lembrando que se for a o infinite scroll quando for mobile e paginação quando for desktop, o código abaixo tem que estar dentro de um if.

this.scroller.elementScrolled().pipe(
      map(() => this.scroller.measureScrollOffset('bottom')),
      pairwise(),
      filter(([y1, y2]) => (y2 < y1 && y2 < 140)),
      throttleTime(200)
    ).subscribe(() => {
      this.ngZone.run(async() => {
        this.nr_Page++
        await this.Buscar_Ramais();  //sempre que atualizar a lista tem que retornar uma nova instancia da lista
      });
    })


	*referente ao comentário assim: 
this.objArrayRamais = [...this.objArrayRamais, ...await this.ramaisService.Get_Ramais(objParams)]
	*eu to chamando a propria lista dentro dela trazendo assim uma nova instancia
	*lembrar que toda função de filtro tem que zerar a lista dando um this.objArrayRamais = []

	outro exemplo tirado do portal empresa:
	 this.objArrayBeneficiarios = [...this.objArrayBeneficiarios, ...objArrayBeneficiarios]
	* o array objArrayBeneficiarios está recebendo ele mesmo e mais os o restante dos obejtos contidos no objeto objArrayBeneficiarios, essa técnica é conhecida como planificações em TS (um array recebe o conteúdo de outros arrays)

4º alterar o nome da DIV (pai) da listagem no HTML para: cdk-virtual-scroll-viewport, e o ngFor para: *cdkVirtualFor


5º colocar o valor da altura dos itens da listagem na mesma DIV (pai), no caso a altura de cada card era 56px, então ficou:
[itemSize]="56"


6º caso a listagem bugue, utilize  minBufferPx="600" maxBufferPx="600" também no HTML, isso manipula o cache. Os valores
 de 600 podem ser alterados. Lembrar de sempre criar uma classe no html na tag do cdk definindo uma altura fixa.


Exemplo de como ficou o HTML: 

 <cdk-virtual-scroll-viewport [itemSize]="56" minBufferPx="600" maxBufferPx="600" class="mx-5 h-full px-5 md:px-20 lg:px-20 pt-4 lg:pt-8">
 
 
 ***************Sacadas***************
 
 Ficar atendo a sempre incrementar a página e depois chamar a função, caso contrário a listagem se duplica
 
 Ficar atendo com a variável que monitora o fim da listagem quando der o refresh, sempre resetar ela também, caso contrário a listagem não funciona
 
 Estava tendo erros no console e alguns deles foram resolvidos colocando o código do 3° passo dentro da função ngAfterViewInit();

 Uma lógica de um outro componente estava também acusando erro no console que foi corrigido pondo os mesmos dentro da função SetTimeOut();
 
 A rolagem dos cards estava bugada, eu rolava a tela e a barra de rolagem subia para a topo tendo que rolar até em baixo da tela para ser jogado para o topo novamente,isso foi resolvido mexendo no [itemSize] no HTML;
 
 Estava tendo um problema com a paginação, por conta de que o componente que fazia a paginação não existia dentro do if (palavras do Gabriel), então eu resolvi essa questão criando uma variável global (nr_Page) e passei como parâmetro para a função de carregar (funcionou nesse caso)
 
 Minha tag no html <cdk-virtual-scroll-viewport> estava dando erro de não ser um elemento reconhecido, eu resolvi impontando o ScrollingModule no arquivo module e rodei o comando yarn dev.
 import { ScrollingModule } from '@angular/cdk/scrolling';
 
 Caso de o um erro de que o array não é incrementável, o iniciei com um array vazio
 
 
 





